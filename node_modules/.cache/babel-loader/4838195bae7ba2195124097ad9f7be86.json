{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAe3D1xCXVeFS9A_jc7Bq_uB_fao5141Ts\",\n  authDomain: \"crwn-db-9b5fd.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-9b5fd-default-rtdb.firebaseio.com\",\n  projectId: \"crwn-db-9b5fd\",\n  storageBucket: \"crwn-db-9b5fd.appspot.com\",\n  messagingSenderId: \"725902458421\",\n  appId: \"1:725902458421:web:cc360e37be048ea1493b7c\",\n  measurementId: \"G-P8B500VZ6X\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Ntos/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","newDocRef","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,mDAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAcA,OAAO,MAAMC,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;AAC1E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AAEA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACA,QAAMC,kBAAkB,GAAI,MAAMJ,aAAa,CAACG,GAAd,EAAlC;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEL,IAAAA,UAAU,EAAEG,kBAAkB,CAACG,IAAnB,CAAwBC,GAAxB,CAA4BV,GAAG,IAAIA,GAAG,CAACW,IAAJ,EAAnC;AAAd,GAAZ;;AAGA,MAAI,CAACP,QAAQ,CAACQ,MAAd,EAAqB;AACnB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAwBlB,QAA9B;AACA,UAAMmB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMlB,OAAO,CAACmB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGlB;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAMqB,KAAN,EAAa;AACbX,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCU,KAAK,CAACC,OAAzC;AACD;AACF;;AACD,SAAOrB,OAAP;AACD,CA5BM;AA6BPb,QAAQ,CAACmC,aAAT,CAAuBlC,MAAvB;AAEA,OAAO,MAAMmC,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACxE,QAAMrB,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqBmB,aAArB,CAAtB;AAEA,QAAME,KAAK,GAAGzB,SAAS,CAACyB,KAAV,EAAd;AACAD,EAAAA,YAAY,CAACE,OAAb,CAAqBC,GAAG,IAAG;AACzB,UAAMC,SAAS,GAAGzB,aAAa,CAACF,GAAd,EAAlB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYmB,SAAZ;AACD,GAHD;AAID,CARM;AAUP,OAAO,MAAMC,IAAI,GAAG3C,QAAQ,CAAC2C,IAAT,EAAb;AACP,OAAO,MAAM7B,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAM8B,QAAQ,GAAG,IAAI5C,QAAQ,CAAC2C,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe5C,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAe3D1xCXVeFS9A_jc7Bq_uB_fao5141Ts\",\r\n  authDomain: \"crwn-db-9b5fd.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-9b5fd-default-rtdb.firebaseio.com\",\r\n  projectId: \"crwn-db-9b5fd\",\r\n  storageBucket: \"crwn-db-9b5fd.appspot.com\",\r\n  messagingSenderId: \"725902458421\",\r\n  appId: \"1:725902458421:web:cc360e37be048ea1493b7c\",\r\n  measurementId: \"G-P8B500VZ6X\"\r\n};\r\n\r\n\r\n\r\n\r\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const collectionRef = firestore.collection('users');\r\n\r\n  const snapShot = await userRef.get();\r\n  const collectionSnapshot =  await collectionRef.get();\r\n\r\n  console.log({ collection: collectionSnapshot.docs.map(doc => doc.data() )});\r\n  \r\n  \r\n  if (!snapShot.exists){\r\n    const {displayName, email } = userAuth;\r\n    const createdAt = new Date ();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      })\r\n    } catch(error) {\r\n      console.log('error creating user', error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  \r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach(obj =>{\r\n    const newDocRef = collectionRef.doc();\r\n    console.log(newDocRef);\r\n  })\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}