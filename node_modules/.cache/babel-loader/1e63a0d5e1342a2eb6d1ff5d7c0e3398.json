{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nimport FormInput from '../../components/form-input/form-input.component';\nexport function* fetchCollectionsAsync() {\n  yield console.log('i am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } //     collectionRef\n  //       .get()\n  //       .then(snapshot => {\n  //         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //         dispatch(fetchCollectionsSuccess(collectionsMap));\n  //       })\n  //       .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  //   };\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/Ntos/crown-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsFailure","fetchCollectionsSuccess","ShopActionTypes","FormInput","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,SAAT,EAAqBC,+BAArB,QAA4D,+BAA5D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAgE,gBAAhE;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAI;AACJ,UAAMC,aAAa,GAAGT,SAAS,CAACU,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAACG,+BAAD,EAAkCU,QAAlC,CAAjC;AACA,UAAMZ,GAAG,CAACI,uBAAuB,CAACU,cAAD,CAAxB,CAAT;AACC,GALD,CAKE,OAAOC,KAAP,EAAc;AACf,UAAMf,GAAG,CAACG,uBAAuB,CAACY,KAAK,CAACC,OAAP,CAAxB,CAAT;AACA,GAVoC,CAWxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC;AACD,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMnB,SAAS,CAACO,eAAe,CAACa,uBAAjB,EACXX,qBADW,CAAf;AAEH","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\r\nimport { firestore , convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsFailure, fetchCollectionsSuccess} from './shop.actions';\r\nimport ShopActionTypes from './shop.types';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\n\r\nexport function* fetchCollectionsAsync(){\r\n   yield console.log('i am fired');\r\n\r\n   try {\r\n   const collectionRef = firestore.collection('collections');\r\n   const snapshot = yield collectionRef.get();\r\n   const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\r\n   yield put(fetchCollectionsSuccess(collectionsMap));\r\n   } catch (error) {\r\n    yield put(fetchCollectionsFailure(error.message))\r\n   }\r\n//     collectionRef\r\n//       .get()\r\n//       .then(snapshot => {\r\n//         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//         dispatch(fetchCollectionsSuccess(collectionsMap));\r\n//       })\r\n//       .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n//   };\r\n}\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, \r\n        fetchCollectionsAsync );\r\n}"]},"metadata":{},"sourceType":"module"}